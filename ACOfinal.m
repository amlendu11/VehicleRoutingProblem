%    the procedure of ant colony algorithm for VRP

%%%%initialize the parameters of ant colony algorithms
C=xlsread('location1');
g=xlsread('demand1');
m=size(C,1); % number of ants
alpha=1;%importance of pheromone
belta=4;% importance of heuristic information miu
lmda=0;
rou=0.9;%volatilization rate
q0=0.95;%pheromone increas rate
% ??
tao0=1/(m*841.04);%start pheromone
Q=1;%pheromone released by one ant after one interation
defined_phrm=15.0; % initial pheromone level value 
QV=24000;% vehicle capacity
n_vehicle=round(sum(g)/QV)+1;%least number of vehicles needed
V=40;

%%%% calculate the distance 
dist=zeros(m,m);
for i=1:m;
for j=1:m;
if i~=j;
 dist(i,j)=sqrt((C(i,1)-C(j,1))^2+(C(i,2)-C(j,2))^2);
else
    dist(i,j)=eps;
end;
end;
end;

%set start tao & miu
tao=ones(m,m);
miu=zeros(m,m);
for i=1:m;
 for j=1:m;
 %s(i,j)=dist(i,1)+dist(1,j)-dist(i,j);
 tao(i,j)=defined_phrm;
 miu(i,j)=1/dist(i,j); 
 end
end

for i=1:m;
 for j=1:m;
 deltao(i,j)=0;
 end;
end

best_cost=10000;
for n_gen=1:50;%number of iteration
%print_head(n_gen); 
for i=1:m;
 best_solution=[];
 %print_head2(i);
 sumload=0;
 cur_pos(i)=1;
 rn=randperm(m);
 n=1;
 nn=1;
 part_sol(nn)=1;
 %cost(n_gen,i)=0.0;
 n_sol=0;%how many routes are generated by ants
 M_vehicle=500;
 t=0;%how many vertice in the best route

 while sumload<=QV;
 
for k=1:length(rn);
if sumload+g(rn(k))<=QV;
gama(cur_pos(i),rn(k))=(sumload+g(rn(k)))/QV;
A(n)=rn(k);
n=n+1;
end;
end;

fid=fopen('out_customer.txt','a+');
fprintf(fid,'%s  %i\t','the current position is:',cur_pos(i));
fprintf(fid,'\n%s','the possible customer set is:')
fprintf(fid,'\t%i\n',A);
fprintf(fid,'------------------------------\n');
fclose(fid);
	%p=compute_prob(A,cur_pos(i),tao,miu,alpha,belta,gama,lmda,i);
maxp=1e-8;
na=length(A);
for j=1:na;
 if p(j)>maxp
 maxp=p(j);
 index_max=j;
 end;
end;
 
old_pos=cur_pos(i);
if rand(1)<q0
cur_pos(i)=A(index_max);
else 
krnd=randperm(na);
cur_pos(i)=A(krnd(1));
bbb=[old_pos cur_pos(i)];
ccc=[1 1];
if bbb==ccc;
cur_pos(i)=A(krnd(2)); 
end;
end;

tao(old_pos,cur_pos(i))=taolocalupdate(tao(old_pos,cur_pos(i)),rou,tao0);%??????????

sumload=sumload+g(cur_pos(i));

nn=nn+1;
part_sol(nn)=cur_pos(i);
temp_load=sumload;
 
if cur_pos(i)~=1;
rn=setdiff(rn,cur_pos(i));
n=1;
A=[];
end;

if cur_pos(i)==1;% start find another route for another vehicle
 if setdiff(part_sol,1)~=[];
n_sol=n_sol+1;% ????????,n_sol=1,2,3,..5,6...,??5??????????????
fid=fopen('out_solution.txt','a+');
fprintf(fid,'%s%i%s','NO.',n_sol,'route is:');
fprintf(fid,'%i  ',part_sol);
fprintf(fid,'\n');
fprintf(fid,'%s','waste quanty of current restaurant is:');
fprintf(fid,'%i\n',temp_load);
fprintf(fid,'------------------------------\n');
fclose(fid);

 %3-opt improvment
final_sol=exchange(part_sol);
 
for nt=1:length(final_sol); % put all the solutions into temp
temp(t+nt)=final_sol(nt);
end;
t=t+length(final_sol)-1;

sumload=0;
final_sol=setdiff(final_sol,1);
rn=setdiff(rn,final_sol);
part_sol=[];
final_sol=[];
nn=1;
part_sol(nn)=cur_pos(i);
A=[];
n=1;

end;
end;

if setdiff(rn,1)==[];% generate the last route which is not ended with point 1
n_sol=n_sol+1;
nl=length(part_sol);
part_sol(nl+1)=1;%set the arrive point is 1

% 3-opt improvement
final_sol=exchange(part_sol); 
 
for nt=1:length(final_sol); % put all the solutions into temp
temp(t+nt)=final_sol(nt);
end;

cost(n_gen,i)=cost_sol(temp,dist)+M_vehicle*(n_sol-n_vehicle);%?????i????????

for ki=1:length(temp)-1;
deltao(temp(ki),temp(ki+1))=deltao(temp(ki),temp(ki+1))+Q/cost(n_gen,i);
end; 
 
if cost(n_gen,i)<best_cost;
best_cost=cost(n_gen,i);
old_cost=best_cost;
best_gen=n_gen;%which generation got the least cost
best_ant=i; %the ant with least cost
best_solution=temp;
end;

if i==m;%???????????????????????????????????
for ii=1:m;
for jj=1:m;
tao(ii,jj)=(1-rou)*tao(ii,jj);
end;
end;

for kk=1:length(best_solution)-1;
tao(best_solution(kk),best_solution(kk+1))=tao(best_solution(kk),best_solution(kk+1))+deltao(best_solution(kk),best_solution(kk+1));
end; 
end;

fid=fopen('out_solution.txt','a+');
fprintf(fid,'%s%i%s','NO.',n_sol,'route is:');
fprintf(fid,'%i ',part_sol);
fprintf(fid,'\n');
fprintf(fid,'%s %i\n','waste quantity current restaurant:',temp_load);
fprintf(fid,'%s %f\n','total cost is:',cost(n_gen,i));
fprintf(fid,'------------------------------\n');
fprintf(fid,'%s\n','final route is:');
fprintf(fid,'%i-',temp);
fprintf(fid,'\n');
fclose(fid); 
temp=[];
break;
end;
end;

end;
end


